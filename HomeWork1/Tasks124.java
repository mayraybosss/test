package HomeWork1;

import java.util.Scanner;

public class Tasks124 {
    public static void main(String[] args) {
        //task 2
        int five = 5;
        int two = 2;
        int three = 3;
        int six = 6;
        int eight = 8;
        int twelve = 12;
        int seven = 7;
        int twenty = 20;
        int twotwo = 22;
        int sixeight = 68;
        int oneonenine = 119;
        boolean true1 = true;
        boolean false1 = false;
        //2.1
        System.out.println(five + two / eight); // 5 так как 2/8 будет равно 0
        //2.2
        System.out.println((five + two) / eight); // 0 так как 5+2 = 7 7/8 = 0 потому что округление идет не в высшую сторону а просто к 0
        //2.3
//     System.out.println((five + two++)/8); // 0 так как будет 5 + 2, после этого это поделится на 8, и переменная two станет равной 3
        //2.4
//      System.out.println((five + two++)/--eight); // 1 так как будет 5 + 2, после этого перменная eight станет равна 7 и поделится на семь,
        // во время выполнения перменная eight станет равна 7 и после выполненияпеременная two станет равна 3.
        //2.5
//        System.out.println((five * two >> two++)/--eight); // five * two = 10 и 0b1010 >> two -> 0b0010 = 2 -> 2/8 = 0;
        //2.6

        //   System.out.println((five + seven > twenty ? sixeight : twotwo * two >> two++)/--eight); //five + seven > twenty - false значит
        // выполнится все то, что стоит после : поссле этого это поделится 11 поделится на 7 и значение eight станет 7
        //2.7
//        System.out.println((five + seven > twenty ? sixeight >= sixeight : twotwo * two >> two++)/--eight);// ошибка так как >= возвращает true или false и это не может делится на 7
        //2.8
        System.out.println(six - two > three && twelve * twelve <= oneonenine); // false так как один из операндов возвращает false
        //2.9
        System.out.println(true1 && false1); // false так как одно из операндов false
//некоторые строчки закоменчены потому что иначе бы это повлиала на результат других строк, так как метод ++a u a++ меняяют значение филдов.
//4 тут нужно просто поменять значения weekday и vacation и результат поменяется
        boolean weekday = true;
        boolean vacation = false;
        if(sleepin(weekday, vacation)){
            System.out.println("Можем спать дальше");
        } else
            System.out.println("Вставай, пора на работу");

    }

    //4
    public static boolean sleepin(boolean weekday, boolean vacation) {
        if (vacation || !weekday) {
//            System.out.println("Можем спать дальше");
            return true;
        } else {
//            System.out.println("Вставай! Пора на работу!");
            return false;
        }
    }
}
/*
task1
42 = 0b101010
15 = 0b001111
~42 = 21 = 0b010101
~15 = 0 = 0b0000
42 & 15 = 10 = 0b1010
&= //соответственно присвоит это значение (10) переменной которая стоит первой(пример a&=b, результат сохранится в a)
42 | 15 = 47 = 0b101111
|= //присваивает
42 ^ 15 = 37 = 0b100101
^= // присваивает
42 >> 15 = 0 = 0b0000 (по сути это равно 42/(2^15))
15 >> 42 = 0 = 0b0000 (15/(2^42))
>>= //присваивает
42 << 15 = 1376256 = 0b101010000000000000000 (42*(2^15))
15 << 42 = 65970697666560 = 0b1111000000000000000000000000000000000000000000 (тут если выполнять операцию с интами тогда ответ будет маленький, потому что число слишком большое и случится то, что мы обсуждали с вами на занятии, переход)
<<= //присваивает
42 >>> 15 = 0 = 0b0000
15 >>> 42 = 0 = 0b0000
--------------------------------------------------------
-42 = 0b11111111111111111111111111010110
-15 = 0b11111111111111111111111111110001
~(-42) = 41 = 101001
~(-15) = 14 = 1110
-42 & (-15) = -48 = 0b11111111111111111111111111010000
-15 & (-42) = -48 = 0b11111111111111111111111111010000
-42 | (-15) = -9 =  0b11111111111111111111111111110111
-15 | (-42) = -9 =  0b11111111111111111111111111110111
42 ^ 15 = 39 = 0b100111
15 ^ 42 = 39 = 0b100111
-42 >> (-15) = -1 = 0b11111111111111111111111111111111
-15 >> (-42) = -1 = 0b11111111111111111111111111111111
-42 << (-15) = -5505024 = 0b11111111101011000000000000000000
-15 << (-42) = -62914560 = 0b11111100010000000000000000000000
-42 >>> (-15) = 32767 = 0b111111111111111
-15 >>> (-42) = 1023 = 0b1111111111
*/
